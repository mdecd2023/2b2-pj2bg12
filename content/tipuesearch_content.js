var tipuesearch = {"pages": [{'title': 'About', 'text': '41023234 Maskie-Razzio \n 41023247 41023247 \n 41023251 sdegbsvrtg \n 41023254 41023254 \n github repository:  https://github.com/mdecd2023/2b2-pj2bg12.git \n github page: https://mdecd2023.github.io/2b-pj2bg12 \n 分組報告最新版本: https://github.com/mdecd2023/2b2-pj2bg12/releases \n', 'tags': '', 'url': 'About.html'}, {'title': '更新網站步驟', 'text': '1.個人的fork倉儲點選sync fork \n 2.輸入git pull \n 3.進行編輯 \n 4.acp \n 5.從個人fork 倉儲Open pull request \n 6.回到整組倉儲merge pull request \n', 'tags': '', 'url': '更新網站步驟.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n \n', 'tags': '', 'url': 'Brython.html'}, {'title': 'Brython_ex2', 'text': 'This code uses the Euler method to approximate the solution to the ODE dy/dx = x - y with an initial condition of y0 = 1.0. The solution is calculated for a range of x values from 0 to 5. \n \n \n \n \n \n \n Solve ODE: \n from browser import document\n\ndef dy_dx(y, x):\n    return x - y\n\nx_start = 0\nx_end = 5\nn_points = 100\nx = [x_start + i * (x_end - x_start) / (n_points - 1) for i in range(n_points)]\ny0 = 1.0\nh = x[1] - x[0]\ny = [y0]\nfor i in range(1, len(x)):\n    y.append(y[-1] + h * dy_dx(y[-1], x[i-1]))\n\n# Create a new paragraph element and set its text content to the solution\np = document.createElement(\'p\')\np.textContent = f"The solution to the ODE is: {y}"\n\n# Append the paragraph element to the body of the webpage\ndocument.body.appendChild(p) \n \n \n \n \n \n Brython environment and  Plotly.js : \n <script src="./../cmsimde/static/brython.js"></script>\n<script src="./../cmsimde/static/brython_stdlib.js"></script>\n<script>// <![CDATA[\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\']});\n}\n// ]]></script>\n<p id="brython_div"></p> \n Brython programe with Plotly.js: \n from browser import document, window\n\ndef dy_dx(y, x):\n    return x - y\n\nx_start = 0\nx_end = 5\nn_points = 100\nx = [x_start + i * (x_end - x_start) / (n_points - 1) for i in range(n_points)]\ny0 = 1.0\nh = x[1] - x[0]\ny = [y0]\nfor i in range(1, len(x)):\n    y.append(y[-1] + h * dy_dx(y[-1], x[i-1]))\n\n# Create a new div element to hold the plot\n#plot_div = document.createElement(\'div\')\n#plot_div.id = \'plot\'\n#document.body.appendChild(plot_div)\nplot_div = document["brython_div"]\n\n# Plot the solution using plotly.js\ndata = [{\'x\': x, \'y\': y}]\nwindow.Plotly.newPlot(\'brython_div\', data) \n This code defines a function dy_dx that represents the mass-spring-damper ordinary differential equation. The Euler method is used to solve this equation for a range of x values from 0 to 20 with initial conditions of y0 = [1.0, 0.0]. The solution is then plotted on the webpage using  plotly.js . \n \n \n \n \n This code defines a function dy_dx that represents the mass-spring-damper system with a PID controller. The gains of the PID controller are set to Kp = 10.0, Ki = 1.0, and Kd = 0.5. The Euler method is used to solve this system of equations for a range of x values from 0 to 20 with initial conditions of y0 = [0.0, 0.0, 0.0, 0.0]. The response of the system is then plotted on the webpage using  plotly.js . \n \n \n \n \n \n \n \n \n \n \n \n \n \n STL part viewer \n \n \n \n \n Using  sine-cosine algorithm  to optimize with constraints in Brython: \n <!DOCTYPE html>\n<html>\n<head>\n    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/brython@3/dist/brython_stdlib"></script>\n</head>\n<body onload="brython()">\n\n<div id="output"></div>\n\n<script type="text/python">\nfrom browser import document\nfrom random import random, uniform\nfrom math import sin, cos, pi\n\n# Define the objective function\ndef objective_function(x):\n    return x[0]**2 + x[1]**2\n\n# Define the constraint functions\ndef constraint1(x):\n    return x[0] + x[1] - 2\n\ndef constraint2(x):\n    return 1 - x[0] - x[1]\n\n# Define the penalty function\ndef penalty_function(x):\n    penalty = 0\n    if constraint1(x) > 0:\n        penalty += constraint1(x)\n    if constraint2(x) > 0:\n        penalty += constraint2(x)\n    return penalty\n\n# Define the fitness function\ndef fitness_function(x):\n    return objective_function(x) + penalty_function(x)\n\n# Define the sine cosine algorithm\ndef sine_cosine_algorithm(fitness_function, dimension, lower_bound, upper_bound, population_size, max_iterations):\n    # Initialize the population\n    population = [[uniform(lower_bound, upper_bound) for _ in range(dimension)] for _ in range(population_size)]\n    population_fitness = [fitness_function(individual) for individual in population]\n\n    # Initialize the best solution\n    best_solution = population[0]\n    best_fitness = population_fitness[0]\n\n    # Main loop of the algorithm\n    for iteration in range(max_iterations):\n        # Calculate the value of a and r1\n        a = 2 - iteration * (2 / max_iterations)\n        r1 = 2 * pi * random()\n\n        # Update the population\n        for i in range(population_size):\n            # Calculate the value of r2, r3 and r4\n            r2 = 2 * random()\n            r3 = 2 * random()\n            r4 = random()\n\n            # Update the individual\n            for j in range(dimension):\n                if r4 < 0.5:\n                    population[i][j] += r1 * sin(r2) * abs(r3 * best_solution[j] - population[i][j])\n                else:\n                    population[i][j] += r1 * cos(r2) * abs(r3 * best_solution[j] - population[i][j])\n\n                # Make sure the individual is within the bounds\n                if population[i][j] < lower_bound:\n                    population[i][j] = lower_bound\n                elif population[i][j] > upper_bound:\n                    population[i][j] = upper_bound\n\n            # Calculate the fitness of the individual\n            population_fitness[i] = fitness_function(population[i])\n\n            # Update the best solution\n            if population_fitness[i] < best_fitness:\n                best_solution = population[i]\n                best_fitness = population_fitness[i]\n\n        # Print the current iteration and best fitness\n        print(f\'Iteration: {iteration + 1}, Best Fitness: {best_fitness:.6f}\')\n\n    return best_solution\n\n# Run the sine cosine algorithm to solve the optimization problem with constraints\nbest_solution = sine_cosine_algorithm(fitness_function, dimension=2, lower_bound=-10, upper_bound=10, population_size=50, max_iterations=100)\n\n# Print the result\noutput_div = document[\'output\']\noutput_div.text = f\'Best Solution: {best_solution}\'\n</script>\n\n<script src="https://cdn.jsdelivr.net/npm/brython@3/dist/brython"></script>\n</body>\n</html> \n Plot the result by using  plotly.js : \n <!DOCTYPE html>\n<html>\n<head>\n    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/brython@3/dist/brython_stdlib"></script>\n    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>\n</head>\n<body onload="brython()">\n\n<div id="output"></div>\n<div id="plot"></div>\n\n<script type="text/python">\nfrom browser import document\nfrom random import random, uniform\nfrom math import sin, cos, pi\n\n# Define the objective function\ndef objective_function(x):\n    return x[0]**2 + x[1]**2\n\n# Define the constraint functions\ndef constraint1(x):\n    return x[0] + x[1] - 2\n\ndef constraint2(x):\n    return 1 - x[0] - x[1]\n\n# Define the penalty function\ndef penalty_function(x):\n    penalty = 0\n    if constraint1(x) > 0:\n        penalty += constraint1(x)\n    if constraint2(x) > 0:\n        penalty += constraint2(x)\n    return penalty\n\n# Define the fitness function\ndef fitness_function(x):\n    return objective_function(x) + penalty_function(x)\n\n# Define the sine cosine algorithm\ndef sine_cosine_algorithm(fitness_function, dimension, lower_bound, upper_bound, population_size, max_iterations):\n    # Initialize the population\n    population = [[uniform(lower_bound, upper_bound) for _ in range(dimension)] for _ in range(population_size)]\n    population_fitness = [fitness_function(individual) for individual in population]\n\n    # Initialize the best solution\n    best_solution = population[0]\n    best_fitness = population_fitness[0]\n\n    # Main loop of the algorithm\n    for iteration in range(max_iterations):\n        # Calculate the value of a and r1\n        a = 2 - iteration * (2 / max_iterations)\n        r1 = 2 * pi * random()\n\n        # Update the population\n        for i in range(population_size):\n            # Calculate the value of r2, r3 and r4\n            r2 = 2 * random()\n            r3 = 2 * random()\n            r4 = random()\n\n            # Update the individual\n            for j in range(dimension):\n                if r4 < 0.5:\n                    population[i][j] += r1 * sin(r2) * abs(r3 * best_solution[j] - population[i][j])\n                else:\n                    population[i][j] += r1 * cos(r2) * abs(r3 * best_solution[j] - population[i][j])\n\n                # Make sure the individual is within the bounds\n                if population[i][j] < lower_bound:\n                    population[i][j] = lower_bound\n                elif population[i][j] > upper_bound:\n                    population[i][j] = upper_bound\n\n            # Calculate the fitness of the individual\n            population_fitness[i] = fitness_function(population[i])\n\n            # Update the best solution\n            if population_fitness[i] < best_fitness:\n                best_solution = population[i]\n                best_fitness = population_fitness[i]\n\n        # Print the current iteration and best fitness\n        print(f\'Iteration: {iteration + 1}, Best Fitness: {best_fitness:.6f}\')\n\n    return best_solution\n\n# Run the sine cosine algorithm to solve the optimization problem with constraints\nbest_solution = sine_cosine_algorithm(fitness_function, dimension=2, lower_bound=-10, upper_bound=10, population_size=50, max_iterations=100)\n\n# Print the result\noutput_div = document[\'output\']\noutput_div.text = f\'Best Solution: {best_solution}\'\n\n# Plot the result using Plotly.js\ndata = [\n    {\n        \'x\': [best_solution[0]],\n        \'y\': [best_solution[1]],\n        \'mode\': \'markers\',\n        \'marker\': {\'size\': 12},\n        \'name\': \'Best Solution\'\n    }\n]\n\nlayout = {\n    \'xaxis\': {\'range\': [-10, 10]},\n    \'yaxis\': {\'range\': [-10, 10]},\n}\n\nPlotly.newPlot(\'plot\', data, layout)\n</script>\n\n<script src="https://cdn.jsdelivr.net/npm/brython@3/dist/brython"></script>\n</body>\n</html> \n \n', 'tags': '', 'url': 'Brython_ex2.html'}, {'title': '每周進度', 'text': '', 'tags': '', 'url': '每周進度.html'}, {'title': 'W9', 'text': '', 'tags': '', 'url': 'W9.html'}, {'title': 'W9_41023234', 'text': '今天我們測試了雙聯機bubblerod，和建立4人網頁，之前一直只能一台控制沒辦法兩人聯機的問題終於有範例可以解決了，現在有對聯機有大概理解了，同時也感謝同組組員幫忙，讓我有比較理解。 \n \n', 'tags': '', 'url': 'W9_41023234.html'}, {'title': 'W9_41023247', 'text': '\n 4/20心得 今天進入了pj2的網站，為避免同組成員產生上傳產生衝突，所以我們決定採用pull requests的方式進行傳輸，一來能避免衝突，二來也能知道傳輸時哪裡有錯，降低除錯次數。同時也測試了雙聯機bubblerod，雖然一開始啟動，機器人無法移動，但詢問同組員後了解錯誤並修改，非常感謝他。然後學校電腦好卡。 \n \n \n \n', 'tags': '', 'url': 'W9_41023247.html'}, {'title': 'W9_41023251', 'text': '\n 4/20(四)心得: 倉儲、網頁部分: 今天進入pj2，我們組這別次決定各組員用fork倉儲再pull request的方式，避免大家同時更新造成的版本錯誤。 因此創立了一個H1頁面，向組員說明如何管理倉儲。 課程內容部分: 有成功以ZMQ遠端控制54號同學電腦中的機器人，僅需更改 localhost 為192.168.1.XX即可。 #可利用以下程式碼查詢自身IP \n ipconfig\n \n \n \n \n', 'tags': '', 'url': 'W9_41023251.html'}, {'title': 'W9_41023254', 'text': '今天我們分了組，使用了老師的程式來控制兩台機器人，新增了一個讓其他電腦可輸入的23000埠號，讓我們可以用一台當主機讓其他台電腦來進行操作，今天做的這些事在上週我們就已經做出所以沒有遇到任何瓶頸，之後老師讓我們自己創建在w9的h2頁面，用來打今天的心得。 \n \n \n \n', 'tags': '', 'url': 'W9_41023254.html'}, {'title': 'W10', 'text': '心得 \n 41023247: \n 提供github之gist放置w10第一題作業程式碼，供組員方便作業 \n 41023254: \n 協助組員建立Brython 程式環境，傳送至組員群組，方便組員作業 \n 41023234: \n 幫忙尋找和解析Brython 程式環境，和亂數生成 \n \n \n \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n \n \n \n \n', 'tags': '', 'url': 'W10.html'}, {'title': 'W11', 'text': "場景: \n 初代測試場景 \n 一開始，我們在如何研究場景大小及如何不讓球卡牆 \n \n 次代測試場景 \n 為了配合美觀，我們將其重新設計 \n \n 最終場景 \xa0 \n 使用Onshape繪製場景，匯入Coppeliasim\xa0 \xa0 \xa0File>Import>Mesh \n 新增感測器 \n 在Coppeliasim中 新增感測器\xa0 \xa0 Menu bar> Add>Proximity sensor>Ray type \n \n \n 4人連機 \n 4人Bubblerob足球場景 \n 將4人bubblerod加入倒場景中 \n 用肝換來的4人連機計分板場景 \n 最終版記分板: \n 使用Onshape繪製我們需要的七段顯示器圖檔，繪製完成後，匯入File>Import>Mesh之後進行爆炸拆件，Edit>Gourping>Divide selected shape \n 改變數字顏色: \n 讓元件變色的方法: \n objectHandle = sim.getObjectHandle('ObjectName')取得物體 \n >originalColor = sim.getShapeColor(objectHandle, nil, sim.colorcomponent_ambient_diffuse)取得原始顏色 \n >newColor = {1, 0, 0}定義新的顏色 \n >sim.setShapeColor(objectHandle, nil, sim.colorcomponent_ambient_diffuse, newColor)設定新的顏 \n \n \n 壓縮檔: \n 雙球員足球場景 \n zmqRemoteAPI Python 操控含場景.7z \n 單機計分板 \n 瀏覽器中計分板設計.7z(含場景與控制程式) \n 玩家: \n BLUE PLAYER \n RED PLAYER \n GREEN PLAYER \n YELLOW PLAYER \n 其他 \n Bill(比爾一隻) \n score board \n w12 影片 \n", 'tags': '', 'url': 'W11.html'}, {'title': '41023247', 'text': '自評分數:62分 在這次的分組作業，學到了如何解決合併時所產生的問題，同時，在本次的模擬中提供了場地，也更了解如何將cad圖檔轉檔進CoppeliaSim。 \n 而在這次的作業裡，我們發現到球門只會感應到機器人而不是球，一開始對於這個問題沒有任何想法解決,，直到詢問班上的別組同學，才知道要將機器人與球的物理性質更改，這才解決了這個煩人的問題。 \n \n', 'tags': '', 'url': '41023247.html'}, {'title': '41023251', 'text': '自評分數:65 \n 負責完成latex分組報告。 \n 在4人協作的pj2開始時主要負責研究如何操作pull request，擬出一套操作步驟置於組內H1頁面。 \n 同時維護網站時期主要研究如何多人同時維護網站，常與54號同學於放學後留下研究。 \n 因為W9內H2頁面標題與W11重複，導致讀取content資料夾內html檔案時會有兩個相同檔名。因此將W9內之H2頁面重新命名。 \n https://github.com/mdecd2023/2b2-pj2bg12/releases \n \n', 'tags': '', 'url': '41023251.html'}, {'title': '41023254', 'text': '我在這次四人協同的課程中主要負責程式的工作，在大家pull requests發生衝突時也會解決衝突，解決衝突的方法來自和51號同學放學後一次又一次的同時上傳測試。 \n 自評:60 \n', 'tags': '', 'url': '41023254.html'}, {'title': '41023234', 'text': '自評分數:65 \n 這次四人分組 我主要把\xa0   (組別亂數生成) \xa0  完成&把 \xa0   (感測器)(場景)(記分板) \xa0   生成並運轉出來 \n \n', 'tags': '', 'url': '41023234.html'}, {'title': 'group', 'text': '', 'tags': '', 'url': 'group.html'}, {'title': 'W13-34', 'text': 'resume( 倉儲 )\xa0 football ( 倉儲 )\xa0 pj1 ( 倉儲 ) pj2 ( 倉儲 ) \n \n \n', 'tags': '', 'url': 'W13-34.html'}]};